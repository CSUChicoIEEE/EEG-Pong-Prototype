import asyncio
import websockets

import logging
import json

from abc import ABCMeta, abstractmethod


########################################################################
class WSClient(metaclass=ABCMeta):
    """"""
    RUNNINNG = False
    MARKER = None

    # ----------------------------------------------------------------------
    def start(self, ip='localhost', port='8845', pack_size=175, boardmode='BOARD_MODE_DEFAULT'):
        """"""
        self.RUNNINNG = True
        self.port = port
        self.ip = ip
        self.pack_size = pack_size
        self.boardmode = boardmode

        asyncio.get_event_loop().run_until_complete(self.recv())

    # ----------------------------------------------------------------------
    def __getattr__(self, attr):
        """"""
        async def inset(**kwargs):
            await self.websocket.send(json.dumps({'command': attr, 'kwargs': kwargs, }))
            # return await websocket.recv()
        return inset

    # ----------------------------------------------------------------------
    # async def send(self, command, kwargs):
        # """"""
        # await self.websocket.send(json.dumps({'command': command, 'kwargs': kwargs}))
        # return await websocket.recv()

    # ----------------------------------------------------------------------

    # def connect(self):
        # """"""
        # self.websocket = websockets.connect(f'ws://{self.ip}:{self.port}/ws')

    # ----------------------------------------------------------------------
    def close(self):
        """"""
        self.websocket.close()

    # ----------------------------------------------------------------------
    async def recv(self):
        """"""
        async with websockets.connect(f'ws://{self.ip}:{self.port}/ws') as websocket:
            self.websocket = websocket

            await self.start_stream(milliseconds=self.pack_size, boardmode=self.boardmode)
            # await websocket.send(json.dumps({'command': 'start_stream', 'kwargs': {}}))

            while self.RUNNINNG:

                if self.MARKER:
                    await self.send_marker(marker=self.MARKER)
                    self.MARKER = None

                data = await websocket.recv()

                data = json.loads(data)

                if not 'data' in data:
                    continue

                data_log = data.copy()
                data_log.pop('data')
                logging.warning(data_log)

                self.update(data)

    # ----------------------------------------------------------------------
    @abstractmethod
    def update(self, data):
        """"""

    # ----------------------------------------------------------------------
    def stop(self):
        """"""
        self.RUNNINNG = False




