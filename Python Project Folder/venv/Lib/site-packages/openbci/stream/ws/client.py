from tornado.ioloop import IOLoop, PeriodicCallback
from tornado import gen
from tornado.websocket import websocket_connect

import logging
import json


########################################################################
class WSClient():
    """"""

    RUNNINNG = True
    MARKER = None

    # ----------------------------------------------------------------------
    def start(self, ip='localhost', port='8845', pack_size=175, boardmode='BOARD_MODE_DEFAULT'):
        """"""
        self.url = f'ws://{ip}:{port}/ws'
        #self.timeout = timeout
        self.ioloop = IOLoop.instance()
        self.ws = None
        self.connect()

        self.RUNNINNG = True
        self.port = port
        self.ip = ip
        self.pack_size = pack_size
        self.boardmode = boardmode

        #PeriodicCallback(self.keep_alive, 20000).start()
        self.ioloop.start()

    # ----------------------------------------------------------------------
    def __getattr__(self, attr):
        """"""
        def inset(*args, **kwargs):
            self.ws.write_message(json.dumps({'command': attr, 'kwargs': kwargs, }))
            # return await websocket.recv()
        return inset

    @gen.coroutine
    # ----------------------------------------------------------------------
    def connect(self):
        """"""
        print("trying to connect")
        try:
            self.ws = yield websocket_connect(self.url)
        except Exception as e:
            print(f"connection error, {e}")
        else:
            print("connected")
            self.run()

    @gen.coroutine
    # ----------------------------------------------------------------------
    def run(self):
        """"""
        self.start_stream(milliseconds=self.pack_size, boardmode=self.boardmode)

        while self.RUNNINNG:
            data = yield self.ws.read_message()
            #data_tmp = data

            #i = 0
            # while data:
                #data_tmp = data
                # data = yield self.ws.read_message()
                #i += 1

            # logging.warning(f'skipped {i}')

            #data = data_tmp
            # if data2:
                #data = data2

            if not data:
                logging.warning(f'NO DATA')
                continue

            data = json.loads(data)

            if not 'data' in data:
                continue

            data_log = data.copy()
            data_log.pop('data')
            logging.warning(data_log)

            self.update(data)

        self.ws = None

    # ----------------------------------------------------------------------
    def update(self, data):
        """"""

    # ----------------------------------------------------------------------
    def close(self, evt):
        """"""
        self.stop()

    # ----------------------------------------------------------------------
    def stop(self):
        """"""
        self.RUNNINNG = False
        self.ws.close()
        ioloop = IOLoop.current()
        ioloop.add_callback(ioloop.stop)

    # ----------------------------------------------------------------------
    # def keep_alive(self):
        # """"""
        # if self.ws is None:
            # self.connect()
        # else:
            #self.ws.write_message("keep alive")


if __name__ == "__main__":
    client = WSClient()
    client.start()
