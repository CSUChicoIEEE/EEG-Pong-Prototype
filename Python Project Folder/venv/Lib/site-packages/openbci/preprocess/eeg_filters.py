"""
===========
EEG Filters
===========

Predefined filter.

"""

import os
from scipy import signal
import numpy as np


########################################################################
class Filter:
    """Generic filter."""

    #----------------------------------------------------------------------
    def __call__(self, data, axis=-1):
        """"""
        return signal.lfilter(self.b, self.a, data, axis=axis)

    #----------------------------------------------------------------------
    @property
    def b(self):
        """"""
        return self._b

    #----------------------------------------------------------------------
    @property
    def a(self):
        """"""
        return self._a


########################################################################
class FiltersChain:
    """Join a set of filters."""

    #----------------------------------------------------------------------
    def __init__(self, *filters):
        """"""

        self.filters = filters

    #----------------------------------------------------------------------
    def __call__(self, data, axis=-1):
        """"""
        for filter_ in self.filters:
            data = filter_(data, axis=axis)
        return data


########################################################################
class GenericNotch(Filter):
    """Neneric notch."""

    #----------------------------------------------------------------------
    def __init__(self, f0, fs, Q=3):
        """Constructor"""

        self._b, self._a = signal.iirnotch(f0, Q, fs)


########################################################################
class GenericButterBand(Filter):
    """Generic bandpass"""

    #----------------------------------------------------------------------
    def __init__(self, f0, f1, fs, N=3):
        """Constructor"""
        nyq = fs / 2
        self._b, self._a = signal.butter(N, (f0 / nyq, f1 / nyq), 'bandpass')


#----------------------------------------------------------------------
def compile_filters(FS):
    """Compile filter.
    
    All filters must be setted for a specified frequnecy sample. Since this
    driver recommend the calculation of sample rate each time the filters must
    be generated before to use them.
    
    """

    global notch60, band545, band330, band245
    global delta, theta, alpha, beta, band1100

    notch60 = GenericNotch(f0=60, fs=FS)
    band545 = GenericButterBand(f0=5, f1=45, fs=FS, N=5)
    band330 = GenericButterBand(f0=3, f1=30, fs=FS, N=3)
    band245 = GenericButterBand(f0=2, f1=45, fs=FS, N=5)
    band1100 = GenericButterBand(f0=1, f1=100, fs=FS, N=5)

    delta = GenericButterBand(f0=2, f1=5, fs=FS, N=5)
    theta = GenericButterBand(f0=5, f1=8, fs=FS, N=5)
    alpha = GenericButterBand(f0=8, f1=12, fs=FS, N=5)
    beta = GenericButterBand(f0=12, f1=30, fs=FS, N=5)


#Precompile filter for 250 Hz
compile_filters(250)
